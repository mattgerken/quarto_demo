---
title: "Create HTML"
format: html
editor: visual
---

## Summary of Built Environment Mapping Tool

```{r}
#| label: load-packages
#| include: false
#| warning: false

library(tidyverse)
library(dplyr)
library(tidyr)
library(readxl)
library(magrittr)
library(urbnthemes)
library(ggplot2)
library(openxlsx)
library(lubridate)
library(janitor)
library(naniar)
library(scales)
library(ggrepel) 
library(stringr)
library(utils)
library(tidylog)
library(rrapply)
library(mdthemes)
library(sf)
library(skimr)
library(stringi)
library(tigris)
library(ggridges)
library(ggtext)
library(ggsvg)
library(ggdist)

options(scipen = 100)

# load data 
finaldata <- st_read("https://services.arcgis.com/neT9SoYxizqTHZPH/arcgis/rest/services/Built_Environment_Indicators/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson", quiet = TRUE) %>%
  mutate(GEOID = as.character(GEOID)) %>%
  st_drop_geometry()

# get DC tracts
dc_tracts <- tracts(
  state = "DC",
  year = 2021,
  progress_bar = FALSE
) %>%
  st_transform(crs = 6487)

# get DC wards
dc_wards <- st_read("https://maps2.dcgis.dc.gov/dcgis/rest/services/DCGIS_DATA/Administrative_Other_Boundaries_WebMercator/MapServer/53/query?outFields=*&where=1%3D1&f=geojson", quiet = TRUE) %>%
  st_transform(crs = 6487) %>%
  select(WARD, NAME, GEOID, geometry)


```

You can add options to executable code like this

```{r}
#| label: infographic
#| echo: false
#| warning: false

set_urbn_defaults(style = "print")

#Use hex from RdYlGn palette in Colour Brewer
green_red_palette <- scales:::brewer_pal(type = "div", palette = "RdYlGn")(11)
green_red_palette_dark <- colorspace::darken(green_red_palette, amount = 0.2)

infographic <- finaldata %>%
  select(m1_1_schools:m9_5_HIN) %>%
  pivot_longer(
    cols = m1_1_schools:m9_5_HIN,
    names_to = "measure",
    values_to = "value"
  ) %>%
  filter(!is.na(value)) %>%
  # create all labels
  mutate(label = case_when(measure == "m1_1_schools" ~ "Schools",
                           measure == "m1_2_quality" ~ "Modernized schools",
                           measure == "m1_3_playgrounds" ~ "Playgrounds",
                           measure == "m1_4_crossing_guards" ~ "Crossing guards",
                           measure == "m1_5_safe_passage" ~ "Safe Passage area",
                           measure == "m1_6_library" ~ "Libraries",
                           measure == "m1_7_wireless_hotspot" ~ "Wireless hotspots",
                           measure == "m1_8_broadband" ~ "Broadband internet access",
                           measure == "m1_9_recreation_center" ~ "Recreation center",
                           measure == "m2_1_commute" ~ "Commutes",
                           measure == "m3_1_banks" ~ "Banking institutions",
                           measure == "m3_2_check_cashing" ~ "Not close to check cashing places",
                           measure == "m4_1_quality" ~ "Housing stock quality",
                           measure == "m4_2_share_since_1970" ~ "Share of homes built since 1970",
                           measure == "m4_3_affordable" ~ "Share of homes that are affordable",
                           measure == "m4_4_vacant_buildings" ~ "Not close to vacant or blighted homes",
                           measure == "m5_1_buses" ~ "Buses",
                           measure == "m5_2_metro" ~ "Metro stations",
                           measure == "m5_3_capital_bikeshare" ~ "Capital Bikeshare",
                           measure == "m5_4_bike_lanes" ~ "Road area covered by bike lanes",
                           measure == "m5_5_sidewalk_quality" ~ "311 requests that are not for sidewalk repair",
                           measure == "m5_6_parking" ~ "Not alleys or parking lots",
                           measure == "m6_1_grocery_store" ~ "Grocery stores",
                           measure == "m6_2_low_food_access" ~ "Not in Low Food Access areas",
                           measure == "m6_3_farmers_markets" ~ "Farmers Markets",
                           measure == "m6_4_healthy_corner_store" ~ "Healthy corner stores",
                           measure == "m6_5_restaurants" ~ "Restaurants",
                           measure == "m6_6_liquor_store" ~ "Not close to liquor stores",
                           measure == "m7_1_health_care" ~ "Health care facilities",
                           measure == "m7_2_mental_health" ~ "Mental health facilities and providers",
                           measure == "m8_1_urban_tree_canopy" ~ "Urban tree canopy",
                           measure == "m8_2_parks" ~ "Parks",
                           measure == "m8_3_trails" ~ "Trails",
                           measure == "m8_4_land_use" ~ "Mix of land uses",
                           measure == "m8_5_positive" ~ "Positive land use",
                           measure == "m8_6_flood_plains" ~ "Not within flood plain",
                           measure == "m9_1_vacant_lots" ~ "Not close to vacant lots",
                           measure == "m9_2_streetlights" ~ "Sidewalks covered by streetlights",
                           measure == "m9_3_police" ~ "Police stations",
                           measure == "m9_4_fire_stations" ~ "Fire stations",
                           measure == "m9_5_HIN" ~ "Not close to High Injury Network Corridor"))

measure_data <- infographic %>%
  # get the descriptive stats we need
  group_by(label) %>%
  summarize(mean = mean(value),
            N = n(),
            se = sd(value)/sqrt(n()),
            min = min(value),
            max = max(value)) %>%
  mutate(across(label, .fns = ~forcats::fct_reorder(., .x = mean, .fun = first))) %>% 
  arrange(desc(mean)) %>%
  mutate(rank_number = 1:n()) %>%
  ungroup()

plot_data <- infographic %>%
  left_join(measure_data, by = "label") %>%
  mutate(across(label, .fns = ~forcats::fct_reorder(., .x = mean, .fun = first))) 

ggplot() + 
  stat_gradientinterval(data = plot_data, aes(y = label, x = value, color = mean, fill = mean, thickness = after_stat(pdf), width = 1),
                        scale = 1, slab_alpha = 0.6, fill_type = "gradient", geom = "slabinterval", 
                        point_interval = "mean_qi", size = 10, point_size = 0,
                        slab_linewidth = 5, position = "identity") + 
  geom_point(data = measure_data,
             aes(y = label, x = mean),
             shape = 21, size = 2, stroke = 0.25, color = "black", fill = "black",
             alpha = 0.4) +
  scale_color_gradientn(
    colors = green_red_palette_dark
  ) + 
  geom_vline(xintercept = c(0.75, 0.5, 0.25), lty = 2, size = 0.25) +
  geom_richtext(aes(x = c(0.875, 0.125),
                    y = 42,
                    label = c(paste0("<span style='color:",
                                     green_red_palette[11],
                                     ";'>High Proximity</span>"),
                              # paste0("<span style='color:",
                              #        green_red_palette[5],
                              #        ";'>Medium</span>"),
                              paste0("<span style='color:",
                                     green_red_palette[1],
                                     ";'>Low Proximity</span>"))),
                label.colour = NA, fontface = "bold",
                fill = NA, hjust = 0.5, vjust = -0.6) +
  #theme_classic() +
  theme(axis.ticks.y = element_blank(),
        axis.ticks.x = element_line(size = 0.25, lineend = "round"),
        axis.line = element_blank(),
        legend.position = "none",
        panel.grid.major = element_blank(),
        plot.margin = margin(r = 10, l = 20, t = 5, b = 5),
        plot.background = element_rect(fill = "#ffffff", colour = NA),
        panel.background = element_rect(fill = "#ffffff", colour = NA),
        plot.caption = element_markdown(hjust = 0, size = 8),
        plot.title = element_markdown(size = 12),
        plot.subtitle = element_markdown(size = 9)) + 
  geom_segment(aes(x = 1, xend = 0, y = 42, yend = 42),
               size = 0.25, lineend = "round") +
  scale_x_continuous(position = "top",
                     labels = scales::percent,
                     trans = "reverse", limits = c(1,0),
                     expand = c(0,0)) +
  scale_y_discrete(expand = c(0,0)) +
  coord_cartesian(clip = 'off') +
  ggtitle("How close are DC neighborhoods to parks, libraries, and other features of the built<br>environment?") +
  labs(y = NULL,
       x = NULL,
       subtitle = paste0("Neighborhoods are closer to education, transportation, and financial institution features but have lower levels of access to<br>affordable housing."),
       caption = paste0("**Source:** District of Columbia Built Environment Indicators and Health Interactive Map Tool<br>**Notes:** Black dots represent the average DC neighborhood. For each data measure, color corresponds to the average neighborhood and<br>bars represent the full range of values across neighborhoods."))



```

The `echo: false` option disables the printing of code (only output is displayed).
